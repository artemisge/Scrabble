import classes

def guidelines():
    """***ΤΕΚΜΗΡΙΩΣΗ***\n
________________________________ΚΡΙΤΗΡΙΟ Α________________________________
Οι κλάσεις που δημιουργήθηκαν είναι οι εξής: SakClass, Player (Human, Computer), Game.
Η SakClass περιλαμβάνει:
    - Μια δομή λεξικού "letters" για να κρατάει το πλήθος των γραμμάτων και την αξία τους.
    - Την συνάρτηση init που αρχικοποιεί το σακουλάκι με τα γράμματα και το "ανακατεύει" τυχαία.
    - Την συνάρτηση randomize_sak που τυχαιοποιεί το σακουλάκι.
    - Την συνάρτηση getLetters(n) που επιστρέφει n γράμματα και ταυτόχρονα τα αφαιρεί από το σακουλάκι.
    - Την συνάρτηση putbackletters(letters) που επιστρέφει πίσω στο σακουλάκι μια λίστα γραμμάτων που της δίνεται ως όρισμα. Έπειτα το ξανατυχαιοποιεί.
    - Μια συνάρτηση getwordvalue(word) που για μια λέξη που δίνεται ως όρισμα, επιστρέφεται η αξία της, σύμφωνα με την δομή letters.

Η Player περιλαμβάνει:
    - Την συνάρτηση init που δημιουργεί μια δομή λεξικού (set) με όλες τις αποδεκτές λέξεις και αρχικοποιεί μια άδεια λίστα με τα διαθέσιμα γράμματα του παίκτη.
    - Την συνάρτηση getAcceptedWords που επιστρέφει ένα set με τις αποδεκτές λέξεις διαβάζοντάς τες από το αρχείο greek7.txt.
    - Την συνάρτηση isWordAccepted(word) που δέχεται ως όρισμα μια λέξη και επιστρέφει σωστό ή λάθος ανάλογα αν η λέξη είναι αποδεκτή (στο λεξικό).

Η Human που είναι απόγονος της Player περιλαμβάνει:
    - Την συνάρτηση init που καλεί την init της Player (super).
    - Την συνάρτηση play που ζητάει από τον χρήστη να πληκτρολογήσει μια έγκυρη λέξη και ελέγχει αν είναι για πάσο, τερματισμό ή αν ο χρήστης θέλει να παίξει. Σε αυτή την περίπτωση ελέγχει αν η λέξη είναι αποδεκτή/μη αποδεκτή και απαντάει με κατάλληλο μήνυμα. Τέλος επιστρέφει την λέξη.
    - Την συνάρτηση checkWord(word, letters) που δέχεται ως όρισμα μια λέξη και τα διαθέσιμα γράμματα του χρήστη και ελέγχει αν η λέξη αποτελείται από αυτά τα γράμματα ή όχι.

Η Computer που είναι απόγονος της Player περιλαμβάνει:
    - Την συνάρτηση init που καλεί την init της Player (super).
    - Την συνάρτηση play(letters, mode) που δημιουργεί μια λίστα με όλους τους δυνατούς συνδυασμούς γραμμάτων (2-7) με βάση τα γράμματα που διαθέτει ο υπολογιστής (letters). Μετά, ανάλογα το mode (MIN, MAX, SMART) ελέγχει ποιοι συνδυασμοί είναι έγκυρες λέξεις και επιστρέφει την κατάλληλη. Στην περίπτωση του SMART mode επιστρέφει μια λίστα από τις κατάλληλες λέξεις ώστε μέσω της κλάσης Game να αποφασιστεί η αξία τους (sak.getwordvalue).
    - Την συνάρτηση getPermutations(letters) που δέχεται μια λίστα από γράμματα και επιστρέφει όλους τους πιθανούς συνδυασμούς τους (2-7) σε μια λίστα.
    - Την συνάρτηση listToString(s) που δέχεται μια λίστα από γράμματα, τα "ενώνει" και τα επιστρέφει ως ένα ενιαίο string.

Η Game περιλαμβάνει:
    - Την συνάρτηση init που αρχικοποιεί τις ρυθμίσεις σε "MIN".
    - Την συνάρτηση run που ξεκινάει την "εφαρμογή" εμφανίζοντας το κύριο μενού το οποίο συνεχίζει να εμφανίζεται μέχρι ο χρήστης να πατήσει q για έξοδο. Οι επιλογές του χρήστη είναι να δει το σκορ, να αλλάξει ρυθμίσεις, να ξεκινήσει νέο παιχνίδι και να πατήσει έξοδος. Η κάθε επιλογή εκτελεί κατάλληλες συναρτήσεις. Στην επιλογή του παιχνιδιού, καλείται η setup -> start -> announceWinner(μόνο αν ο χρήστης δεν πάτησε quit) -> end(μόνο αν ο χρήστης δεν πάτησε quit).
    - Την συνάρτηση setup που αρχικοποιεί τις απαραίτητες μεταβλητές για να ξεκινήσει ένα νέο παιχνίδι (sak, player, computer, moves, computerScore, playerScore, availableLetters για τον καθένα).
    - Την συνάρτηση start που ξεκινάει ένα νέο παιχνίδι. Οι παίκτες παίζουν εναλλάξ. Σε κάθε παίκτη εμφανίζονται τα διαθέσιμα γράμματά τους (7) αλλά και όσα έμειναν στο σακουλάκι. Έπειτα η συνάρτηση ελέγχει την είσοδο του χρήστη  για πάσο (ο υπολογιστής παίζει αυτόματα και μπορεί να πει και αυτός πάσο αν δεν έχει να παίξει)(Σε περίπτωση πάσου ανανεώνει τα γράμματα του παίκτη επιστρέφοντάς τα στο σακουλάκι και παίρνοντας καινούρια), για τερματισμό (επσιτρέφει στο κυρίως μενού) ή εφόσον η λέξη που θα έχει παίξει θα είναι έγκυρη λόγω της Human.play/Computer.play (εκτός από το SMART mode που σε αυτή την περίπτωση η λέξη υπολογίζεται εδώ.) υπολογίζει την αξία της λέξης, ανανεώνει το σκορ, και αφαιρεί τα γράμματα από τα διαθέσιμα του παίκτη και προσθέτει μέχρι να είναι 7. Αν δεν υπάρχουν γράμματα στο σακουλάκι να συμπληρώσουν αυτά του χρήστη ή του υπολογιστή τότε το παιχνίδι τελειώνει. Μέχρι να τελειώσει, μετράει τις συνολικούς γύρους (moves) και ανακοινώνει σε κάθε γύρο το σκορ.
    - Την συνάρτηση announceWinner που με βάση το τελικό σκορ, ανακοινώνει τον νικητή.
    - Την συνάρτηση getLettersAndValues(letters) που παίρνει ως όρισμα τα διαθέσιμα γράμματα του παίκτη και φτιάχνει και επιστρέφει ένα string με αυτά και τις αξίες τους.
    - Την συνάρτηση end που αποθηκεύει τα στατιστικά του συγκεκριμένου παιχνιδιού που τελείωσε στο αρχείο score.json.
    - Την συνάρτηση changeSettings που τυπώνει ένα μενού με τις διαθέσιμες ρυθμίσεις και ο χρήστης διαλέγει ένα από τα πιθανά σενάρια παιξίματος του υπολογιστή (MIN, MAX, SMART)
    - Την συνάρτηση menu που απλά τυπώνει το κυρίως μενού και επιστρέφει την είσοδο του χρήστη χωρίς κανέναν έλεγχο.
    - Την συνάρτηση printScore που ανοίγει και διαβάζει τα στατιστικά που είναι αποθηκευμένα στο score.json και τυπώνει για κάθε παιχνίδι την βαθμολογία του κάθε παίκτη αλλά και τις συνολικές κινήσεις (γύρους).

________________________________ΚΡΙΤΗΡΙΟ Β________________________________
Η δομή που χρησιμοποιήθηκε για να αποθηκεύει όλες τις αποδεκτές λέξεις είναι dictionary (συγκεκριμένα set για να μην χρειάζεται καποιο value για την κάθε λέξη -> set.add(word)).

________________________________ΚΡΙΤΗΡΙΟ Γ________________________________
Η βιβλιοθήκη με την "εφαρμογή" βρίσκεται στο αρχείο classes.py.

________________________________ΚΡΙΤΗΡΙΟ Δ________________________________
Έχει υλοποιηθεί το σενάριο MIN/MAX/SMART. Ο χρήστης μπορεί να διαλέξει ποιο θέλει από τις ρυθμίσεις στο μενού.

________________________________ΚΡΙΤΗΡΙΟ Ε________________________________
Προστέθηκαν κατανοητά μηνύματα και "πάτα ENTER για να συνεχίσεις" όπου χρειαζόταν, ώστε ο χρήστης να προλάβει να διαβάσει αυτά που θέλει στο τερματικό πριν "ανέβουν" πολύ.

________________________________ΚΡΙΤΗΡΙΟ ΣΤ________________________________
:)

________________________________ΚΡΙΤΗΡΙΟ Ζ________________________________
Στο παραδοτέο περιλαμβάνονται: main-3374.py, classes.py, greek7.txt, score.json.

EXTRA: Για την σωστή λειτουργία του κώδικα της βιβλιοθήκης classes.py έγιναν import τα ακόλουθα:
random, itertools, copy, json

Ο κώδικας υπάρχει και στο github: https://github.com/artemisge/Scrabble
________________________________ΤΕΛΟΣ________________________________
"""
    print(guidelines.__doc__)

game = classes.Game()
#help(guidelines)
game.run()